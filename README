HelloHello

나중에는
add commit push 만 하면 됨. 처음 설정할 때는 init하고 등등 해야함

build된 파일은 commit하지 말자. 이런걸 git이 알아서 해주도록 하는 게 gitignore

a.exe	a.exe 예외처리
*.exe	모든 exe 파일을 예외처리(숨김파일 .*.exe도 포함)
/a.exe	최상위 디렉토리만의 a.exe 예외처리
!a.exe	이미 예외처리된 규칙을 무시하고 a.exe 추가
!a/**	이미 예외처리된 규칙을 무시하고 a 디렉토리에 있는 모든 파일/디렉토리 추가

(/: root, !: not)


normal rool같은 경우에는 torvalds/linux/.gitignore에서 확인할 수 있는데, 컴파일 중간에 생기는 파일같은것들이 주로 들어가 있는 것 같다

binary같은거 예외처리할 때 컴파일 잘 안되거나 그럴 수도 있으므로, gitignore를 처음부터 제대로 정해놓아야 한다.

각 commit에는 commit hash값이 있다.

git show
git log
git diff
git reset	git add 전으로 되돌리기. git add된 것을 git add하기 전으로 바꿀 뿐 파일 자체가 바뀌는 것은 아님
		특정 커밋으로 jump할 수 있다. 
		- git을 시간여행 시킨다
		- 실제 파일들까지 시간여행시킨다
		보통 commit 실수했을 때 많이 사용

		git reset		초록색->빨간색
		git reset --hard	실제 파일들까지 reset. commit된 시점으로 원상복구
		git reset --soft	git만 reset

		* 커밋을 잘못했을 때*
		git reset --soft @^	파일 냅두고 한단계 위로 이동하기
		(수정)
		git add .
		git commit
		git push origin master -f	-f means force. git revert는 되돌리는 커밋을 만드는건데(revert했다는 기록이 남을 것), 이거는 예전에 한 커밋을 없던 셈치는 것. 
						지금은 서버보다 내 로컬이 더 옛날과정이다보니 -f 안하면 에러뜰 것. 다만 다른 사람과 같이 할때는 조심해야..
						동료가 내 커밋을 사용해서 개발하고 있을 때 reset해서 커밋을 없던셈쳐버리면 merge할 때 문제가 생긴다.
						즉, reset은 10초 이전에 바로 수정해야 할 정도로 바로바로 해야할 때, 그 사이에 누가 내 커밋을 가져갈 일 없을 경우에만 사용하기.

		git revert @		
		git revert a^..b

		git reflog		실제 시간순으로 log. 내 기준으로. reset/revert 사용 전의 시점이 어느 커밋인지 찾아낼 수 있음. reset/revert 잘못했을 때 찾아낼 수 있음.
					서버에는 저장 안되고 로컬에만 저장된다.
		

git revert
git cherry-pick		다른 branch에 있는 commit 몇개를 가져오고 싶을 때
git merge

git status


git은 commit과 그 hash 중심으로 구성된다.




